name: ci-P_NF-dev

on:
  push:
    paths:
      - "Notifications-P_NF/**"
      - ".github/workflows/ci_pnf_dev.yml"

jobs:
  Build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Notifications-P_NF
    steps:
     - 
      name: Checkout
      uses: actions/checkout@v3

     - 
      name: Build containers
      run: |
          echo ":: Create Network"
          docker network create background_network
          echo ":: Rebulding Contener And Up"
          cp docker-compose.dev.yml docker-compose.yml
          docker-compose -f docker-compose.yml up -d --build
          echo ":: Clear var"
          ls -la
         
          DIR=./var
          if [ -d "$DIR" ]
          then
          echo "Remove Var"
          chmod -R 777 ./var
          rm -rf "$DIR"
          fi
          mkdir ./var
          chmod -R 777 ./var
          
          ls -la ./src/NF
          docker exec PHP_P_NF composer install
          chmod +x ./bin/console
          echo 'docker container ls'
          docker container ls
          echo 'docker-compose ps '
          docker-compose ps 
          echo 'docker-compose exec postgres ls -l'
          docker-compose exec -T postgres ls -l
          echo '  docker-compose exec php ping postgres'
          docker-compose exec -T php ping -c 2 postgres
          docker-compose exec -T php ./bin/console doctrine:database:create  --env=test

          echo ":: Version"
          docker exec PHP_P_NF ls -l
          docker exec PHP_P_NF php -v && composer --version && docker-compose --version
          
          
          echo ":: Run Symfony Serverr"
          docker exec PHP_P_NF symfony server:ca:install
          docker exec PHP_P_NF symfony server:stop
          docker exec PHP_P_NF symfony server:start --port=8000 -d
       
     - 
      name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.0
      with:
       name: P_NF 
       path: |
        ./Notifications-P_NF
        !./Notifications-P_NF/var/*
        !./Notifications-P_NF/vendor/*

  # StaticCodeAnalysis:
  #   runs-on: ubuntu-latest
  #   needs: Build
  #   steps:
  #     -
  #      name: Download a Build Artifact
  #      uses: actions/download-artifact@v3.0.0
  #      with:
  #       name: P_NF 

  #     - 
  #       name: Build and Up Container
  #       run: | 
  #         echo ":: List Download a Build Artifact "
  #         ls -la
  #         docker network create background_network
  #         docker-compose -f docker-compose.yml up -d --build
  #         docker exec PHP_P_NF composer install
  #         chmod +x ./bin/console
  #         docker-compose exec -T php ./bin/console doctrine:database:create  --env=test


  #     -    
  #      name: PhpStan
  #      run: |
  #       echo "PhpStan"
  #         sudo chmod -R +x ${PWD}/docker/.
  #         sudo chmod -R +x ${PWD}/vendor/.
  #         echo "php-cs-fixer script"
  #         ${PWD}/docker/symfony/static-code-analysis/phpstan
  #     - 
  #       name: Php-Cs-Fixer
  #       run: | 
  #         echo "Php-Cs-Fixer"
  #         sudo chmod -R +x ${PWD}/docker/.
  #         sudo chmod -R +x ${PWD}/vendor/.
  #         echo "php-cs-fixer script"
  #         ${PWD}/docker/symfony/static-code-analysis/php-cs-fixer-analysee
          

  Test:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      -
        name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.0
        with:
         name: P_NF 
     
      - 
        name: Build and Up Container
        run: | 
          echo ":: List Download a Build Artifact "
          ls -la
          docker network create background_network
          docker-compose -f docker-compose.yml up -d --build
          docker exec PHP_P_NF composer install
          chmod +x ./bin/console
          docker-compose exec -T php ./bin/console doctrine:database:create  --env=test

      # - 
      #   name: Unit Test
      #   run: | 
      #    echo "Unit Test"
      #    ls -la ${PWD}
      #    chmod -R +x  ${PWD}/docker/symfony/cmd ${PWD}/tests/.
      #    ${PWD}/docker/symfony/cmd php bin/phpunit tests/ --group Unit
      # - 
      #  name: Integration Test
      #  run: |
      #    echo "Integration Test"
      #    chmod -R +x  ${PWD}/docker/symfony/cmd ${PWD}/tests/.
      #    ${PWD}/docker/symfony/cmd php bin/phpunit tests/ --group Integration  
      # -
      #   name: Functional Test
      #   run: | 
      #    echo "Functional Test"
      #    chmod -R +x  ${PWD}/docker/. ${PWD}/tests/. ${PWD}/bin/.
      #    ${PWD}/docker/symfony/test/functional
      # - 
      #  name: Application Test
      #  run: | 
      #    echo "Application Test"
      #    chmod -R +x ${PWD}/docker/symfony/cmd tests/.
      #    ${PWD}/docker/symfony/cmd php bin/phpunit tests/ --group Aspplication  
      - 
        name: No Group Test
        run: | 
          echo "No Group Test"
          chmod -R +x  ${PWD}/docker/. ${PWD}/tests/. ${PWD}/bin/. ${PWD}/var/
          ${PWD}/docker/symfony/cmd php bin/phpunit tests/ --exclude-group Unit,Integration,Application
  
